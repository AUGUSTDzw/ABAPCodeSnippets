  METHOD read_sap_text_to_string.


    DATA: lt_lines       TYPE TABLE OF tline,
          lt_lines_clean TYPE TABLE OF tline,
          e_thead        TYPE thead.

    DATA: lv_new_line TYPE char10.

    lv_new_line = COND #( WHEN i_new_line_seperator IS INITIAL THEN cl_abap_char_utilities=>newline ELSE i_new_line_seperator ).

    " Read text
    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        id                      = i_id
        language                = i_language
        name                    = i_name
        object                  = i_object
      IMPORTING
        header                  = e_thead
      TABLES
        lines                   = lt_lines
      EXCEPTIONS
        id                      = 1
        language                = 2
        name                    = 3
        not_found               = 4
        object                  = 5
        reference_check         = 6
        wrong_access_to_archive = 7
        OTHERS                  = 8.

    IF sy-subrc <> 0.
      " Implement suitable error handling here
    ENDIF.


    " The QMEL LTEXT is in PM format. The rest is "normal".
    IF i_id EQ 'LTXT'.

      LOOP AT lt_lines ASSIGNING FIELD-SYMBOL(<fs_line>).
        APPEND INITIAL LINE TO lt_lines_clean ASSIGNING FIELD-SYMBOL(<fs_clean>).

        <fs_clean>-tdformat = <fs_line>-tdline(2).    " First 2 characters
        <fs_clean>-tdline   = <fs_line>-tdline+2.     " The rest with 2 offset

      ENDLOOP.

      " Convert to string
      r_text_string = zcl_cs_ot_claim=>convert_txttable_to_string( EXPORTING i_text_table = lt_lines_clean i_new_line_seperator = lv_new_line ).

    ELSE.
      " Convert to string
      r_text_string = zcl_cs_ot_claim=>convert_txttable_to_string( EXPORTING i_text_table = lt_lines i_new_line_seperator = lv_new_line ).

    ENDIF.

  ENDMETHOD.